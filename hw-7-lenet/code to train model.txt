import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision.datasets import MiniPlaces
from torchvision.transforms import transforms

# Load MiniPlaces dataset
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor()
])

train_dataset = MiniPlaces(root='./', split='train', download=True, transform=transform)
test_dataset = MiniPlaces(root='./', split='val', download=True, transform=transform)

# Define data loaders
def get_data_loader(batch_size):
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
    return train_loader, test_loader

# Define training function
def train(model, train_loader, test_loader, lr=0.001, epochs=10):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=lr, momentum=0.9)

    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0

        for inputs, labels in train_loader:
            optimizer.zero_grad()
            outputs, _ = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()

        train_loss = running_loss / len(train_loader)
        train_acc = correct / total

        # Validation
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for inputs, labels in test_loader:
                outputs, _ = model(inputs)
                _, predicted = outputs.max(1)
                total += labels.size(0)
                correct += predicted.eq(labels).sum().item()

        test_acc = correct / total

        print(f'Epoch {epoch+1}/{epochs}, Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}')


# Train with default configuration
print("Training with default configuration:")
train_loader, test_loader = get_data_loader(batch_size=32)
model = LeNet()
train(model, train_loader, test_loader)

# 2. Set the batch size to 8
print("\nTraining with batch size 8:")
train_loader, test_loader = get_data_loader(batch_size=8)
model = LeNet()
train(model, train_loader, test_loader)

# 3. Set the batch size to 16
print("\nTraining with batch size 16:")
train_loader, test_loader = get_data_loader(batch_size=16)
model = LeNet()
train(model, train_loader, test_loader)

# 4. Set the learning rate to 0.05
print("\nTraining with learning rate 0.05:")
train_loader, test_loader = get_data_loader(batch_size=32)
model = LeNet()
train(model, train_loader, test_loader, lr=0.05)

# 5. Set the learning rate to 0.01
print("\nTraining with learning rate 0.01:")
train_loader, test_loader = get_data_loader(batch_size=32)
model = LeNet()
train(model, train_loader, test_loader, lr=0.01)

# 6. Set the epochs to 20
print("\nTraining with 20 epochs:")
train_loader, test_loader = get_data_loader(batch_size=32)
model = LeNet()
train(model, train_loader, test_loader, epochs=20)

# 7. Set the epochs to 5
print("\nTraining with 5 epochs:")
train_loader, test_loader = get_data_loader(batch_size=32)
model = LeNet()
train(model, train_loader, test_loader, epochs=5)